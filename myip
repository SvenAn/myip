#!/usr/bin/env python3

# Internet_hostname is used to determine if you have internet connectivity. You should
# use an ip address which is _very_ likely to respond.
internet_hostname = "1.1.1.1"

# Ip list is a list of ip-addresses you would like to check each time you test
# your internet connectivity. It could be a local server, an office host or
# whatever, really.
iplist   = ["10.202.102.147"]

# DNS will show you your local dns reslovers if set to 'yes'.
dns      = 'yes'

# Most computers have a local or loopback interface. Myip will include this if set
# to True.
print_lo_if = False


# Check Python version.
import sys
sys.tracebacklimit = 0
assert sys.version_info >= (3, 4), "\n\nExiting, you must use Pyton 3.5 or newer.\n\n"
sys.tracebacklimit = 100


import os
import re
import subprocess
from requests import get


# You can add ip-addresses to check from command line. Just include as many as you want.
# Getting ip-address from ARGV:
for x in sys.argv[1:]:
    #print("arg=", x)
    regex = re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", x)
    if regex:
        iplist.append(x)


# Define CLI colors:
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# Small sub-routine to ping a certain ip address.
def pingip(ipaddress):
    pingresult = os.system("ping -c 1 -w 1 " + ipaddress + " > /dev/null")
    return (pingresult)


# Small sub-routine to check an ip-address and add appropriate colors.
def checkip(ipaddress):
    response = pingip(ipaddress)
    if response == 0:
        ipaddress = bcolors.OKGREEN + ipaddress + bcolors.ENDC
    else:
        ipaddress = bcolors.FAIL + ipaddress + bcolors.ENDC
    return (ipaddress)




# OK, Let's start the show..


# Print header
print("\nMy IP info:\n")


#  Ping Internet, check the response...
response = pingip(internet_hostname)
if response == 0:
    print("  Internet connection............................  " + bcolors.OKGREEN + "OK" + bcolors.ENDC)

    # Get my public ip-address:
    ip = get('https://api.ipify.org').text
    print('  Public IP address:.............................  {}'.format(ip))

    # Get my dns-name:
    #txt = subprocess.check_output(["/usr/bin/host", str(ip)])
    #dnsname = re.search(r"\S+$", str(txt))
    #print('  Public host name:..............................  ' + dnsname.group())

else:
    print("  Internet connection............................  " + bcolors.FAIL + "FAILED" + bcolors.ENDC)


# If additional ip-addresses are submitted:
for x in iplist:
    print("  Checking host .................................  "+ checkip(x) )


# Fetch IP info
txt = subprocess.check_output(["nmcli", "dev", "show"])
lines = txt.splitlines()
for line in lines: 

    # Print interface name
    regex = re.match(r".*GENERAL.DEVICE:.*", str(line))
    if regex:
        my_if = re.search(r"(\w+).$", str(line))
        print("\n  Network interface.............................. ",my_if.group(1))

    # Print ip address
    regex = re.match(r".*IP4.ADDRESS.*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*", str(line))
    if regex:
        x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
        print("  IP-Address..................................... ",x.group())

    # Print default gw
    regex = re.match(r".*IP4.GATEWAY.*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*", str(line))
    if regex:
        x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
        print("  Default-Gateway................................ ",checkip(x.group()))
    
    # Save dns resolvers
    # If you want to see dns-resolvers in use:
    if dns == 'yes':
        regex = re.match(r".*DNS.*", str(line))
        if regex:
            x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
            print("  DNS-server..................................... ", checkip( x.group() ))

print("\nDone.\n\n")
