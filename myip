#!/usr/bin/env python3


hostname = "1.1.1.1"
iplist   = ["10.202.102.147"]
dns      = 'yes'

import sys

# Check Python version.
sys.tracebacklimit = 0
assert sys.version_info >= (3, 4), "\n\nExiting, you must use Pyton 3.5 or newer.\n\n"
sys.tracebacklimit = 100


import os
import re
import subprocess
from requests import get


# Getting ip-address from ARGV:
for x in sys.argv[1:]:
    #print("arg=", x)
    regex = re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", x)
    if regex:
        iplist.append(x)


# Define CLI colors:
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def pingip(ipaddress):
    pingresult = os.system("ping -c 1 -w 1 " + ipaddress + " > /dev/null")
    return (pingresult)


# Print header
print("\nMy IP info:\n")

#  Ping Internet, check the response...
response = pingip(hostname)
if response == 0:
    print("  Internet connection............................  " + bcolors.OKGREEN + "OK" + bcolors.ENDC)
    # Get my public ip-address:
    ip = get('https://api.ipify.org').text
    print('  Public IP address:.............................  {}'.format(ip))
else:
    print("  Internet connection............................  " + bcolors.FAIL + "FAILED" + bcolors.ENDC)


# If additional ip-addresses are submitted:
for x in iplist:
    response = pingip(x)
    if response == 0:
        print("  Checking host .................................  "+ bcolors.OKGREEN + x + bcolors.ENDC)
    else:
        print("  Checking host .................................  "+ bcolors.FAIL + x + bcolors.ENDC)


# Fetch IP info
txt = subprocess.check_output(["nmcli", "dev", "show"])
lines = txt.splitlines()
for line in lines: 

    regex = re.match(r".*GENERAL.DEVICE:.*", str(line))
    if regex:
        x = re.search(r"\S+$", str(line))
        print("\n  Network interface.............................. ",x.group())

    regex = re.match(r".*IP4.ADDRESS.*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*", str(line))
    if regex:
        x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
        print("  IP-Address..................................... ",x.group())

    regex = re.match(r".*IP4.GATEWAY.*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*", str(line))
    if regex:
        x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
        print("  Default-Gateway................................ ",x.group())
    
    # If you want to see dns-resolvers in use:
    if dns == 'yes':
        regex = re.match(r".*DNS.*", str(line))
        if regex:
            x = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", str(line))
            print("  DNS-server..................................... ",x.group())

print("\nDone.\n\n")
